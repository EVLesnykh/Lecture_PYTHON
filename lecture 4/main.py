# 1. АНОНИМНЫЕ, lambda-функции

# пример №1:

# def f(x):
#   return x ** 2
# print(f(2))

# усовершенствуем наш код
# def f(x):
#   return x ** 2
# g = f
# print(f(4)) # 16
# print(g(4)) # 16

# пример №2 сделаем калькулятор:
# def calc1(a):
#     return a+a
# def calc2(a):
#     return a*a
# def math(op, x):
#     print(op(x))
# math(calc1, 5) 

# пример №3 передаем две переменные:
# def calc1(a, b):
#     return a + b
# def calc2(a, b):
#     return a * b
# def math(op, x, y):
#     print(op(x, y))
# math(calc1, 5, 45) 

# пример №4 лямбда функция:

# def calc2(a, b):
#     return a * b
# def math(op, x, y):
#     print(op(x, y))

# calc1 = lambda a, b: a + b
# calc3 = lambda a, b: a - b
# math(calc3, 5, 45) 

# САМОСТОЯТЕЛЬНОЕ РЕШЕНИЕ
#  В списке хранятся числа. Нужно выбрать только чётные числа и составить
# список пар (число; квадрат числа).
# Пример: 1 2 3 5 8 15 23 38
# Получить: [(2, 4), (8, 64), (38, 1444)]
# Решение:
# data = [1, 2, 3, 5, 8, 15, 23, 38]
# result = []
# for i in data :
#   if i % 2 == 0:
#     result.append((i, i ** 2))
# print(result)

# 2. ФУНКЦИЯ map
# list_1 = [x for x in range (1,20)]
# list_1 = list(map(lambda x: x + 10, list_1 ))
# print(list_1)

# пример 1
# 1. Маленькое отступление, функция строка.split() - убирает все пробелы и создаем
# список из значений строки, пример:
# data = '1 2 3 5 8 15 23 38'.split()
# print(data) # ['1', '2', '3', '5', '8', '15', '23', '38']

# 3. Функция filter
# data = [x for x in range(10)]
# res = list(filter(lambda x: x % 2 == 0, data))
# print(res) # [0, 2, 4, 6, 8]

# 4. Функция zip
# users = ['user1', 'user2', 'user3', 'user4', 'user5']
# ids = [4, 5, 9, 14, 7]
# data = list(zip(users, ids))
# print(data) # [('user1', 4), ('user2', 5), ('user3', 9), ('user4', 14), ('user5', 7)

# 5. Функция enumerate
# users = ['user1', 'user2', 'user3']
# data = list(enumerate(users))
# print(data) # [(0, 'user1'), (1, 'user2'), (2, 'user3))]

# 6. ФАЙЛЫ
# Файлы в текстовом формате используются для:
# ● Хранения данных
# ● Передачи данных в клиент-серверных проектах
# ● Хранения конфигов
# ● Логирования действий
# Что нужно для работы с файлами:
# 1. Завести переменную, которая будет связана с этим текстовым файлом.
# 2. Указать путь к файлу.
# 3. Указать, в каком режиме мы будем работать с файлом.

# Варианты режима (мод):
# 1. a – открытие для добавления данных.
# ○ Позволяет дописывать что-то в имеющийся файл.
# ○ Если вы попробуете дописать что-то в несуществующий файл, то файл
# будет создан и в него начнётся запись.
# 2. r – открытие для чтения данных.
# ○ Позволяет читать данные из файла.
# ○ Если вы попробуете считать данные из файла, которого не существует,
# программа выдаст ошибку.
# 3. w – открытие для записи данных.
# ○ Позволяет записывать данные и создавать файл, если его не
# существует.
# Миксованные режимы:
# 4. w+
# ○ Позволяет открывать файл для записи и читать из него.
# ○ Если файла не существует, он будет создан.
# 5. r+
# ○ Позволяет открывать файл для чтения и дописывать в него.
# ○ Если файла не существует, программа выдаст ошибку.

colors = ['red', 'green', 'blue']
data = open('file.txt', 'a') # здесь указываем режим, в котором будем работать
data.writelines(colors) # разделителей не будет
data.close()

with open('file.txt', 'w') as data:
  data.write('line 1\n')
  data.write('line 2\n')
print(56)
# path = 'file.txt'
# data = open(path, 'r')
# for line in data:
#   print(line)
# data.close()

# colors = ['red', 'green', 'blue']
# data = open('file.txt', 'w')
# data.writelines(colors) # разделителей не будет
# data.close()